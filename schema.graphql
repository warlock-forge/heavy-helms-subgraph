# ==========================================================
#                   INTERFACES                               
# ==========================================================
# Add a Fighter interface that represents common properties
interface Fighter {
  id: ID!                  # Unique identifier
  fighterId: BigInt!       # Numeric ID from contract
  fighterType: String!     # "Player", "DefaultPlayer", or "Monster"
  isRetired: Boolean!      # Whether the fighter is retired
  
  # Common attributes
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  
  # Stance field (new)
  stance: Int!            # uint8 stance value
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# ==========================================================
#                   CORE ENTITIES                            
# ==========================================================
# Keep your existing Player entity but implement the Fighter interface
type Player implements Fighter @entity {
  id: ID!
  fighterId: BigInt!
  fighterType: String!    # Will always be "Player"
  owner: Owner!
  isRetired: Boolean!
  isImmortal: Boolean!    # Only players have this
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, defaults to 1
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
  creationTx: Bytes!
}

type PlayerSnapshot implements Fighter @entity {
  id: ID!                 # Format: "fighterId-skinIndex-skinTokenId-stance"
  fighterId: BigInt!      # This already serves as the player ID
  fighterType: String!    # Will be "PlayerSnapshot"
  owner: Owner!
  isRetired: Boolean!
  isImmortal: Boolean!
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information (from event)
  skinIndex: Int!
  skinTokenId: Int!
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  
  # Stance field (from event)
  stance: Int!
  
  # Snapshot timestamp
  snapshotTimestamp: BigInt!
  
  # Required by Fighter interface
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# New type for default players
type DefaultPlayer implements Fighter @entity {
  id: ID!
  fighterId: BigInt!      # The playerId from the contract
  fighterType: String!    # Will always be "DefaultPlayer"
  isRetired: Boolean!     # Should always be false
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields (always 0)
  wins: Int!
  losses: Int!
  kills: Int!
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, set on creation
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# New type for monsters
type Monster implements Fighter @entity {
  id: ID!
  fighterId: BigInt!      # The monsterId from the contract
  fighterType: String!    # Will always be "Monster"
  isRetired: Boolean!
  tier: Int!              # Monster-specific field
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!    # Might not be used for monsters
  surnameIndex: Int!      # Might not be used for monsters
  firstName: String       # Could be monster type name
  surname: String         # Could be empty
  fullName: String        # Could be monster type name
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, set on creation
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# ==========================================================
#                   SUPPORTING ENTITIES                      
# ==========================================================
type Owner @entity {
  id: ID!
  address: Bytes!
  totalPlayers: Int!
  activePlayers: [Player!]! @derivedFrom(field: "owner")
  players: [Player!]! @derivedFrom(field: "owner")
  nameChangeCharges: BigInt!
  attributeSwapCharges: BigInt!
  playerSlots: Int!
}

# Entity to track pending player creation requests
type PendingPlayerCreation @entity {
  id: ID! # requestId
  requester: Bytes! # address of the requester (future owner)
  fulfilled: Boolean!
  playerId: BigInt # set when fulfilled
  createdAt: BigInt!
}

# Entity to store player attributes temporarily between handlers
type PlayerAttributes @entity {
  id: ID! # playerId
  firstNameIndex: Int!
  surnameIndex: Int!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
}

type Name @entity {
  id: ID!
  index: Int!
  nameType: Int!  # 0: nameSetA, 1: nameSetB, 2: surname
  value: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

enum ContractType {
  PLAYER_OWNED
  GAME_OWNED
}

type SkinCollection @entity {
  id: ID!
  registryId: BigInt!
  contractAddress: Bytes!
  isVerified: Boolean!
  skinType: Int!  # 0: Player, 1: DefaultPlayer, 2: Monster
  contractType: ContractType!
  requiredNFTAddress: Bytes
  skins: [Skin!]! @derivedFrom(field: "collection")
}

type Skin @entity {
  id: ID!
  collection: SkinCollection!
  tokenId: Int!
  metadataURI: String
  equippedBy: [Player!]! @derivedFrom(field: "currentSkin")
  weapon: Int
  armor: Int
}

# ==========================================================
#                   PLAYER EVENTS                            
# ==========================================================
type PlayerCreationRequested @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  requester: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerCreationComplete @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  playerId: BigInt! # uint32
  owner: Bytes! # address
  randomness: BigInt! # uint256
  firstNameIndex: Int! # uint16
  surnameIndex: Int! # uint16
  strength: Int! # uint8
  constitution: Int! # uint8
  size: Int! # uint8
  agility: Int! # uint8
  stamina: Int! # uint8
  luck: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAttributesUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  strength: Int! # uint8
  constitution: Int! # uint8
  size: Int! # uint8
  agility: Int! # uint8
  stamina: Int! # uint8
  luck: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAttributesSwapped @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  decreaseAttribute: Int! # uint8
  increaseAttribute: Int! # uint8
  newDecreaseValue: Int! # uint8
  newIncreaseValue: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerWinLossUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  wins: Int! # uint16
  losses: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerKillUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  kills: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerImmortalityChanged @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  caller: Bytes! # address
  immortal: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerRetired @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  caller: Bytes! # address
  retired: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerNameUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  firstNameIndex: Int! # uint16
  surnameIndex: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerSkinEquipped @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  skinIndex: BigInt! # uint32
  tokenId: Int! # uint16
  stance: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerSlotsPurchased @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  slotsAdded: Int! # uint8
  totalSlots: Int! # uint8
  amountPaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestRecovered @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  user: Bytes! # address
  amount: BigInt! # uint256
  adminInitiated: Boolean! # bool
  recoveryTimestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AttributeSwapAwarded @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  totalCharges: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NameChangeAwarded @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  totalCharges: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreatePlayerFeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt! # uint256
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SlotBatchCostUpdated @entity(immutable: true) {
  id: Bytes!
  oldCost: BigInt! # uint256
  newCost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PausedStateChanged @entity(immutable: true) {
  id: Bytes!
  isPaused: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EquipmentRequirementsUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameContractPermissionsUpdated @entity(immutable: true) {
  id: Bytes!
  gameContract: Bytes! # address
  permissions_record: Boolean! # bool
  permissions_retire: Boolean! # bool
  permissions_name: Boolean! # bool
  permissions_attributes: Boolean! # bool
  permissions_immortal: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestedRandomness @entity(immutable: true) {
  id: Bytes!
  round: BigInt! # uint256
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StanceUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  stance: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   DEFAULT PLAYER EVENTS                    
# ==========================================================
type DefaultPlayerCreated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  firstNameIndex: Int!
  surnameIndex: Int!
  stance: Int! # uint8
  wins: Int!      # From record
  losses: Int!    # From record
  kills: Int!     # From record
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultPlayerStatsUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  firstNameIndex: Int!
  surnameIndex: Int!
  stance: Int! # uint8
  wins: Int!      # From record
  losses: Int!    # From record
  kills: Int!     # From record
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   MONSTER EVENTS                           
# ==========================================================
type MonsterCreated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  nameIndex: Int!
  stance: Int! # uint8
  wins: Int!
  losses: Int!
  kills: Int!
  tier: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterStatsUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  nameIndex: Int!
  stance: Int! # uint8
  wins: Int!
  losses: Int!
  kills: Int!
  tier: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterWinLossUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  wins: Int!
  losses: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterKillsUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  kills: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterImmortalStatusUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  immortal: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterRetired @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  retired: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   REGISTRY EVENTS                            
# ==========================================================
# Events from PlayerNameRegistry
type NameAdded @entity(immutable: true) {
  id: Bytes!
  nameType: Int! # uint8
  index: Int! # uint16
  name: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Events from PlayerSkinRegistry
type SkinRegistered @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  skinContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkinVerificationUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  isVerified: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkinTypeUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  skinType: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequiredNFTUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  requiredNFTAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrationFeeUpdated @entity(immutable: true) {
  id: Bytes!
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensCollected @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   DUEL GAME ENTITIES                       
# ==========================================================
type DuelChallenge @entity {
  id: ID!
  challengerId: BigInt!
  defenderId: BigInt!
  wagerAmount: BigInt!
  
  # Keep owner references on the challenge for direct querying
  challengerOwner: Owner
  defenderOwner: Owner
  
  # References to PlayerSnapshot entities
  challengerSnapshot: PlayerSnapshot!
  defenderSnapshot: PlayerSnapshot
  
  createdBlock: BigInt!
  createdAt: BigInt!
  expiresTimestamp: BigInt
  withdrawableTimestamp: BigInt

  state: DuelChallengeState!
  
  # Fields for completed duels
  winnerId: BigInt
  randomness: Bytes
  winnerPayout: BigInt
  feeCollected: BigInt
}

# Define an enum for duel states
enum DuelChallengeState {
  OPEN
  PENDING
  COMPLETED
  CANCELLED
  FORFEITED
}

# ==========================================================
#                   DUEL GAME EVENTS                         
# ==========================================================
type ChallengeCreated @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challengerId: BigInt!
  defenderId: BigInt!
  wagerAmount: BigInt!
  challengerSkinIndex: BigInt!
  challengerSkinTokenId: BigInt!
  challengerStance: BigInt!
  createdAtBlock: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  challenge: DuelChallenge!
}

type ChallengeAccepted @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  defenderId: BigInt!
  defenderSkinIndex: BigInt!
  defenderSkinTokenId: BigInt!
  defenderStance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  challenge: DuelChallenge
}

type ChallengeCancelled @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChallengeForfeited @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  amount: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DuelComplete @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  winnerId: BigInt!
  randomness: BigInt!
  winnerPayout: BigInt!
  feeCollected: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type CombatResult @entity(immutable: true) {
  id: Bytes!
  player1Data: Bytes!
  player2Data: Bytes!
  winningPlayerId: BigInt!
  packedResults: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type FeesWithdrawn @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Administrative Events
type MinDuelFeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt!
  newFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinWagerAmountUpdated @entity(immutable: true) {
  id: Bytes!
  newAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEnabledUpdated @entity(immutable: true) {
  id: Bytes!
  enabled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WagerFeePercentageUpdated @entity(immutable: true) {
  id: Bytes!
  oldPercentage: BigInt!
  newPercentage: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WagersEnabledUpdated @entity(immutable: true) {
  id: Bytes!
  enabled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeUntilExpireUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeUntilWithdrawUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stats @entity {
  id: ID!  # Use "all" as the ID for a singleton
  
  # Fighter counts
  playerCount: Int!
  activePlayerCount: Int!
  retiredPlayerCount: Int!
  defaultPlayerCount: Int!
  monsterCount: Int!
  activeMonsterCount: Int!
  retiredMonsterCount: Int!
  totalFightersCount: Int!
  
  # Combat statistics
  totalWins: Int!
  totalLosses: Int!
  totalKills: Int!
  
  # Duel statistics
  totalDuels: Int!
  totalWagerDuels: Int!
  totalNonWagerDuels: Int!
  openChallenges: Int!
  completedDuels: Int!
  cancelledDuels: Int!
  forfeitedDuels: Int!
  
  # Wager statistics
  totalWageredAmount: BigInt!
  totalFeesCollected: BigInt!
  totalWinnerPayouts: BigInt!
  averageWagerAmount: BigInt!
  
  # Skin statistics
  skinCollectionsCount: Int!
  verifiedSkinCollectionsCount: Int!
  totalSkinsCount: Int!
  
  # Owner statistics
  uniqueOwnersCount: Int!
  
  # Timestamps
  lastUpdated: BigInt!
}

# Helper entity for mapping addresses to collection IDs
type SkinAddressMapping @entity {
  id: ID!
  registryId: BigInt!
  contractAddress: Bytes!
}

type ChallengeRecovered @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challengerRefund: BigInt!
  defenderRefund: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEngineUpdated @entity(immutable: true) {
  id: Bytes!
  oldEngine: Bytes!
  newEngine: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerContractUpdated @entity(immutable: true) {
  id: Bytes!
  oldContract: Bytes!
  newContract: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VrfRequestTimeoutUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

