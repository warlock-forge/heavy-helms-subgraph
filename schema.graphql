# ==========================================================
#                   INTERFACES                               
# ==========================================================
# Add a Fighter interface that represents common properties
interface Fighter {
  id: ID!                  # Unique identifier
  fighterId: BigInt!       # Numeric ID from contract
  fighterType: String!     # "Player", "DefaultPlayer", or "Monster"
  isRetired: Boolean!      # Whether the fighter is retired
  
  # Common attributes
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  gauntletWins: Int!       # Number of gauntlets won
  duelWins: Int!           # Number of duels won
  
  # Stance field (new)
  stance: Int!            # uint8 stance value
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# ==========================================================
#                   CORE ENTITIES                            
# ==========================================================
# Keep your existing Player entity but implement the Fighter interface
type Player implements Fighter @entity {
  id: ID!
  fighterId: BigInt!
  fighterType: String!    # Will always be "Player"
  owner: Owner!
  isRetired: Boolean!
  isImmortal: Boolean!    # Only players have this
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  gauntletWins: Int!       # Number of gauntlets won
  duelWins: Int!           # Number of duels won
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, defaults to 1
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
  creationTx: Bytes!
  uniqueWins: Int!
  uniqueLosses: Int!
  battleRating: Int!
  gauntletStatus: PlayerGauntletStatus! # Default to NONE
  currentGauntlet: Gauntlet # Link to Gauntlet if IN_GAUNTLET
}

type PlayerSnapshot implements Fighter @entity {
  id: ID!                 # Format: "fighterId-skinIndex-skinTokenId-stance"
  fighterId: BigInt!      # This already serves as the player ID
  fighterType: String!    # Will be "PlayerSnapshot"
  owner: Owner!
  isRetired: Boolean!
  isImmortal: Boolean!
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information (required by Fighter interface)
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  gauntletWins: Int!       # Number of gauntlets won (snapshot value)
  duelWins: Int!           # Number of duels won (snapshot value)
  
  # Stance field (from event)
  stance: Int!
  
  # Snapshot timestamp
  snapshotTimestamp: BigInt!
  
  # Required by Fighter interface
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# New type for default players
type DefaultPlayer implements Fighter @entity {
  id: ID!
  fighterId: BigInt!      # The playerId from the contract
  fighterType: String!    # Will always be "DefaultPlayer"
  isRetired: Boolean!     # Should always be false
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!
  surnameIndex: Int!
  firstName: String
  surname: String
  fullName: String
  
  # Skin information
  currentSkin: Skin
  
  # Record fields (always 0)
  wins: Int!
  losses: Int!
  kills: Int!
  gauntletWins: Int!       # Number of gauntlets won
  duelWins: Int!           # Number of duels won
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, set on creation
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# New type for monsters
type Monster implements Fighter @entity {
  id: ID!
  fighterId: BigInt!      # The monsterId from the contract
  fighterType: String!    # Will always be "Monster"
  isRetired: Boolean!
  tier: Int!              # Monster-specific field
  
  # Common attributes from Fighter
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  
  # Name fields
  firstNameIndex: Int!    # Might not be used for monsters
  surnameIndex: Int!      # Might not be used for monsters
  firstName: String       # Could be monster type name
  surname: String         # Could be empty
  fullName: String        # Could be monster type name
  
  # Skin information
  currentSkin: Skin
  
  # Record fields
  wins: Int!
  losses: Int!
  kills: Int!
  gauntletWins: Int!       # Number of gauntlets won
  duelWins: Int!           # Number of duels won
  
  # Stance field (new)
  stance: Int!            # uint8 stance value, set on creation
  
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

# ==========================================================
#                   SUPPORTING ENTITIES                      
# ==========================================================
type Owner @entity {
  id: ID!
  address: Bytes!
  totalPlayers: Int!
  activePlayers: [Player!]! @derivedFrom(field: "owner")
  players: [Player!]! @derivedFrom(field: "owner")
  nameChangeCharges: BigInt!
  attributeSwapCharges: BigInt!
  playerSlots: Int!
}

# Entity to track pending player creation requests
type PendingPlayerCreation @entity {
  id: ID! # requestId
  requester: Bytes! # address of the requester (future owner)
  fulfilled: Boolean!
  playerId: BigInt # set when fulfilled
  createdAt: BigInt!
}

# Entity to store player attributes temporarily between handlers
type PlayerAttributes @entity {
  id: ID! # playerId
  firstNameIndex: Int!
  surnameIndex: Int!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
}

type Name @entity {
  id: ID!
  index: Int!
  nameType: Int!  # 0: nameSetA, 1: nameSetB, 2: surname
  value: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

enum ContractType {
  PLAYER_OWNED
  GAME_OWNED
}

type SkinCollection @entity {
  id: ID!
  registryId: BigInt!
  contractAddress: Bytes!
  isVerified: Boolean!
  skinType: Int!  # 0: Player, 1: DefaultPlayer, 2: Monster
  contractType: ContractType!
  requiredNFTAddress: Bytes
  skins: [Skin!]! @derivedFrom(field: "collection")
}

type Skin @entity {
  id: ID!
  collection: SkinCollection!
  tokenId: Int!
  metadataURI: String
  equippedBy: [Player!]! @derivedFrom(field: "currentSkin")
  weapon: Int
  armor: Int
}

# ==========================================================
#                   PLAYER EVENTS                            
# ==========================================================
type PlayerCreationRequested @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  requester: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerCreationComplete @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  playerId: BigInt! # uint32
  owner: Bytes! # address
  randomness: BigInt! # uint256
  firstNameIndex: Int! # uint16
  surnameIndex: Int! # uint16
  strength: Int! # uint8
  constitution: Int! # uint8
  size: Int! # uint8
  agility: Int! # uint8
  stamina: Int! # uint8
  luck: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAttributesUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  strength: Int! # uint8
  constitution: Int! # uint8
  size: Int! # uint8
  agility: Int! # uint8
  stamina: Int! # uint8
  luck: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAttributesSwapped @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  decreaseAttribute: Int! # uint8
  increaseAttribute: Int! # uint8
  newDecreaseValue: Int! # uint8
  newIncreaseValue: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerWinLossUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  wins: Int! # uint16
  losses: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerKillUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  kills: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerImmortalityChanged @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  caller: Bytes! # address
  immortal: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerRetired @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  caller: Bytes! # address
  retired: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerNameUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  firstNameIndex: Int! # uint16
  surnameIndex: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerSkinEquipped @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  skinIndex: BigInt! # uint32
  tokenId: Int! # uint16
  stance: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerSlotsPurchased @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  slotsAdded: Int! # uint8
  totalSlots: Int! # uint8
  amountPaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestRecovered @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  user: Bytes! # address
  amount: BigInt! # uint256
  adminInitiated: Boolean! # bool
  recoveryTimestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AttributeSwapAwarded @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  totalCharges: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NameChangeAwarded @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  totalCharges: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreatePlayerFeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt! # uint256
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SlotBatchCostUpdated @entity(immutable: true) {
  id: Bytes!
  oldCost: BigInt! # uint256
  newCost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PausedStateChanged @entity(immutable: true) {
  id: Bytes!
  isPaused: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EquipmentRequirementsUpdated @entity(immutable: true) {
  id: Bytes!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameContractPermissionsUpdated @entity(immutable: true) {
  id: Bytes!
  gameContract: Bytes! # address
  permissions_record: Boolean! # bool
  permissions_retire: Boolean! # bool
  permissions_name: Boolean! # bool
  permissions_attributes: Boolean! # bool
  permissions_immortal: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequestedRandomness @entity(immutable: true) {
  id: Bytes!
  round: BigInt! # uint256
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StanceUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt! # uint32
  stance: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   DEFAULT PLAYER EVENTS                    
# ==========================================================
type DefaultPlayerCreated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  firstNameIndex: Int!
  surnameIndex: Int!
  stance: Int! # uint8
  wins: Int!      # From record
  losses: Int!    # From record
  kills: Int!     # From record
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultPlayerStatsUpdated @entity(immutable: true) {
  id: Bytes!
  playerId: BigInt!
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  firstNameIndex: Int!
  surnameIndex: Int!
  stance: Int! # uint8
  wins: Int!      # From record
  losses: Int!    # From record
  kills: Int!     # From record
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   MONSTER EVENTS                           
# ==========================================================
type MonsterCreated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  nameIndex: Int!
  stance: Int! # uint8
  wins: Int!
  losses: Int!
  kills: Int!
  tier: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterStatsUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  strength: Int!
  constitution: Int!
  size: Int!
  agility: Int!
  stamina: Int!
  luck: Int!
  skinIndex: BigInt!
  skinTokenId: Int!
  nameIndex: Int!
  stance: Int! # uint8
  wins: Int!
  losses: Int!
  kills: Int!
  tier: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterWinLossUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  wins: Int!
  losses: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterKillsUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  kills: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterImmortalStatusUpdated @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  immortal: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonsterRetired @entity(immutable: true) {
  id: Bytes!
  monsterId: BigInt! # uint32
  retired: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   REGISTRY EVENTS                            
# ==========================================================
# Events from PlayerNameRegistry
type NameAdded @entity(immutable: true) {
  id: Bytes!
  nameType: Int! # uint8
  index: Int! # uint16
  name: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Events from PlayerSkinRegistry
type SkinRegistered @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  skinContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkinVerificationUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  isVerified: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkinTypeUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  skinType: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequiredNFTUpdated @entity(immutable: true) {
  id: Bytes!
  registryId: BigInt! # uint32
  requiredNFTAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrationFeeUpdated @entity(immutable: true) {
  id: Bytes!
  newFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensCollected @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# ==========================================================
#                   DUEL GAME ENTITIES                       
# ==========================================================
type DuelChallenge @entity {
  id: ID!
  challengerId: BigInt!
  defenderId: BigInt!
  wagerAmount: BigInt!
  
  # Keep owner references on the challenge for direct querying
  challengerOwner: Owner
  defenderOwner: Owner
  
  # References to PlayerSnapshot entities
  challengerSnapshot: PlayerSnapshot!
  defenderSnapshot: PlayerSnapshot
  
  createdBlock: BigInt!
  createdAt: BigInt!
  expiresTimestamp: BigInt
  withdrawableTimestamp: BigInt

  state: DuelChallengeState!
  
  # Fields for completed duels
  winnerId: BigInt
  randomness: BigInt
  winnerPayout: BigInt
  feeCollected: BigInt
}

# Define an enum for duel states
enum DuelChallengeState {
  OPEN
  PENDING
  COMPLETED
  CANCELLED
  FORFEITED
}

# ==========================================================
#                   DUEL GAME EVENTS                         
# ==========================================================
type ChallengeCreated @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challengerId: BigInt!
  defenderId: BigInt!
  wagerAmount: BigInt!
  challengerSkinIndex: BigInt!
  challengerSkinTokenId: BigInt!
  challengerStance: BigInt!
  createdAtBlock: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  challenge: DuelChallenge!
}

type ChallengeAccepted @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  defenderId: BigInt!
  defenderSkinIndex: BigInt!
  defenderSkinTokenId: BigInt!
  defenderStance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  challenge: DuelChallenge
}

type ChallengeCancelled @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChallengeForfeited @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  amount: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DuelComplete @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  winnerId: BigInt!
  randomness: BigInt!
  winnerPayout: BigInt!
  feeCollected: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type CombatResult @entity(immutable: true) {
  id: ID!                  
  transactionHash: Bytes! @index
  logIndex: Int!           
  player1Data: Bytes!
  player2Data: Bytes!
  winningPlayerId: BigInt!
  packedResults: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  
  # Decoded combat statistics (extracted from packedResults)
  player1Won: Boolean!      # True if player1 won, false if player2 won
  gameEngineVersion: Int!   # Version of the game engine that generated this log
  winCondition: String!     # HEALTH, EXHAUSTION, MAX_ROUNDS, or DEATH
  roundCount: Int!          # Number of rounds/actions in the combat
  
  # Player 1 Statistics
  player1TotalDamage: Int!     # Total damage dealt by player 1
  player1TotalStaminaLost: Int! # Total stamina lost by player 1
  player1Attacks: Int!         # Number of attack actions by player 1
  player1Hits: Int!            # Number of successful hits by player 1
  player1Misses: Int!          # Number of misses by player 1
  player1Crits: Int!           # Number of critical hits by player 1 (including riposte/counter crits)
  player1Blocks: Int!          # Number of successful blocks by player 1
  player1Counters: Int!        # Number of counter attacks by player 1
  player1Dodges: Int!          # Number of successful dodges by player 1
  player1Parries: Int!         # Number of successful parries by player 1
  player1Ripostes: Int!        # Number of riposte attacks by player 1
  player1DefensiveActions: Int! # Total defensive actions (blocks + dodges + parries)
  player1MaxDamage: Int!       # Highest single damage dealt by player 1
  
  # Player 1 Failed Attack Types (attacks that didn't land due to opponent's defense)
  player1AttacksBlocked: Int!  # Number of player 1's attacks that were blocked by opponent
  player1AttacksCountered: Int! # Number of player 1's attacks that were countered by opponent  
  player1AttacksDodged: Int!   # Number of player 1's attacks that were dodged by opponent
  player1AttacksParried: Int!  # Number of player 1's attacks that were parried by opponent
  player1AttacksRiposted: Int! # Number of player 1's attacks that were riposted by opponent
  
  # Player 1 Calculated Stats (from decoded player data)
  player1MaxHealth: Int!       # Player 1's maximum health at start of combat
  player1MaxStamina: Int!      # Player 1's maximum stamina at start of combat
  player1EndingHealth: Int!    # Player 1's health at end of combat (maxHealth - damage taken)
  player1EndingStamina: Int!   # Player 1's stamina at end of combat (maxStamina - stamina lost)
  
  # Player 2 Statistics (mirror of player 1)
  player2TotalDamage: Int!
  player2TotalStaminaLost: Int!
  player2Attacks: Int!
  player2Hits: Int!
  player2Misses: Int!
  player2Crits: Int!
  player2Blocks: Int!
  player2Counters: Int!
  player2Dodges: Int!
  player2Parries: Int!
  player2Ripostes: Int!
  player2DefensiveActions: Int!
  player2MaxDamage: Int!
  
  # Player 2 Failed Attack Types (attacks that didn't land due to opponent's defense)
  player2AttacksBlocked: Int!  # Number of player 2's attacks that were blocked by opponent
  player2AttacksCountered: Int! # Number of player 2's attacks that were countered by opponent  
  player2AttacksDodged: Int!   # Number of player 2's attacks that were dodged by opponent
  player2AttacksParried: Int!  # Number of player 2's attacks that were parried by opponent
  player2AttacksRiposted: Int! # Number of player 2's attacks that were riposted by opponent
  
  # Player 2 Calculated Stats (from decoded player data)
  player2MaxHealth: Int!       # Player 2's maximum health at start of combat
  player2MaxStamina: Int!      # Player 2's maximum stamina at start of combat
  player2EndingHealth: Int!    # Player 2's health at end of combat (maxHealth - damage taken)
  player2EndingStamina: Int!   # Player 2's stamina at end of combat (maxStamina - stamina lost)
}

type FeesWithdrawn @entity(immutable: true) {
  id: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Administrative Events
type MinDuelFeeUpdated @entity(immutable: true) {
  id: Bytes!
  oldFee: BigInt!
  newFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinWagerAmountUpdated @entity(immutable: true) {
  id: Bytes!
  newAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEnabledUpdated @entity(immutable: true) {
  id: Bytes!
  enabled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WagerFeePercentageUpdated @entity(immutable: true) {
  id: Bytes!
  oldPercentage: BigInt!
  newPercentage: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WagersEnabledUpdated @entity(immutable: true) {
  id: Bytes!
  enabled: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeUntilExpireUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeUntilWithdrawUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stats @entity {
  id: ID!  # Use "all" as the ID for a singleton
  
  # Fighter counts
  playerCount: Int!
  activePlayerCount: Int!
  retiredPlayerCount: Int!
  defaultPlayerCount: Int!
  monsterCount: Int!
  activeMonsterCount: Int!
  retiredMonsterCount: Int!
  totalFightersCount: Int!
  
  # Combat statistics
  totalWins: Int!
  totalLosses: Int!
  totalKills: Int!
  
  # Duel statistics
  totalDuels: Int!
  totalWagerDuels: Int!
  totalNonWagerDuels: Int!
  openChallenges: Int!
  completedDuels: Int!
  cancelledDuels: Int!
  forfeitedDuels: Int!
  
  # Wager statistics
  totalWageredAmount: BigInt!
  totalFeesCollected: BigInt!
  totalWinnerPayouts: BigInt!
  averageWagerAmount: BigInt!
  
  # Skin statistics
  skinCollectionsCount: Int!
  verifiedSkinCollectionsCount: Int!
  totalSkinsCount: Int!
  
  # Owner statistics
  uniqueOwnersCount: Int!
  
  # Timestamps
  lastUpdated: BigInt!
  
  # Gauntlet statistics
  totalGauntletsStarted: Int!
  totalGauntletsCompleted: Int!
  totalGauntletsRecovered: Int!
  totalGauntletPrizeMoneyAwarded: BigInt!
  totalGauntletFeesCollected: BigInt!
  currentGauntletQueueSize: Int!
  currentGauntletEntryFee: BigInt!
  currentGauntletSize: Int!
  currentGauntletFeePercentage: BigInt!
  currentMinTimeBetweenGauntlets: BigInt!
}

# Helper entity for mapping addresses to collection IDs
type SkinAddressMapping @entity {
  id: ID!
  registryId: BigInt!
  contractAddress: Bytes!
}

type ChallengeRecovered @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt!
  challengerRefund: BigInt!
  defenderRefund: BigInt!
  challenge: DuelChallenge!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEngineUpdated @entity(immutable: true) {
  id: Bytes!
  oldEngine: Bytes!
  newEngine: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerContractUpdated @entity(immutable: true) {
  id: Bytes!
  oldContract: Bytes!
  newContract: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VrfRequestTimeoutUpdated @entity(immutable: true) {
  id: Bytes!
  oldValue: BigInt!
  newValue: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type PlayerVsRecord @entity {
  id: ID!                # "{player1Id}-{player2Id}" - always sorted to ensure uniqueness
  player1: String!       # First player ID (lexicographically smaller)
  player2: String!       # Second player ID (lexicographically larger)
  player1WinsAgainst2: Boolean!  # Has player1 ever beaten player2?
  player2WinsAgainst1: Boolean!  # Has player2 ever beaten player1?
  firstPlayer1Win: BigInt        # When player1 first beat player2 (null if never)
  firstPlayer2Win: BigInt        # When player2 first beat player1 (null if never)
}

# ==========================================================
#                   GAUNTLET GAME ENTITIES                   
# ==========================================================

enum GauntletState {
  PENDING
  COMPLETED
}

enum PlayerGauntletStatus {
  NONE
  QUEUED
  IN_GAUNTLET
}

# Represents a single Gauntlet run
type Gauntlet @entity {
  id: ID!                  # Gauntlet ID (uint256 from contract)
  size: Int!               # 4, 8, 16, or 32
  entryFee: BigInt!        # Entry fee paid by each participant
  state: GauntletState!    # PENDING or COMPLETED
  vrfRequestId: BigInt     # ID of the associated VRF request
  vrfRequestTimestamp: BigInt! # Timestamp of VRF request
  completionTimestamp: BigInt # Timestamp of completion or recovery
  participants: [GauntletParticipant!]! @derivedFrom(field: "gauntlet") # List of participants (INITIAL REGISTRANTS)
  roundWinners: [String!]  # List of Fighter IDs for each round winner (size - 1)
  champion: Fighter        # Link to the final winner (Player or DefaultPlayer)
  prizeAwarded: BigInt!    # Amount paid to the winner (0 if default wins or no payout)
  feeCollected: BigInt!    # Amount collected as contract fees
  startedAt: BigInt!       # Timestamp GauntletStarted event occurred
  startedTx: Bytes!        # Transaction hash of GauntletStarted
  completedAt: BigInt      # Timestamp GauntletCompleted event occurred
  completedTx: Bytes       # Transaction hash of GauntletCompleted
  recoveredAt: BigInt      # Timestamp GauntletRecovered event occurred
  recoveredTx: Bytes       # Transaction hash of GauntletRecovered
  finalParticipantIds: [String!] # List of final participant IDs (INCLUDING SUBSTITUTIONS)
}

# Represents a player's participation in a specific Gauntlet
type GauntletParticipant @entity {
  id: ID!                  # Composite ID: "{gauntletId}-{playerId}"
  gauntlet: Gauntlet!      # Link back to the Gauntlet
  player: Fighter!         # Link to the participating Fighter (Player or DefaultPlayer)
  skin: Skin               
  stance: Int!             # Stance used by the player in this gauntlet
}

# ==========================================================
#                   GAUNTLET GAME EVENTS                     
# ==========================================================

type PlayerQueued @entity(immutable: true) {
  id: Bytes!               # Transaction hash
  playerId: BigInt!        # uint32 indexed playerId
  queueSize: BigInt!       # uint256 queueSize
  entryFee: BigInt!        # uint256 entryFee
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerWithdrew @entity(immutable: true) {
  id: Bytes!               # Transaction hash
  playerId: BigInt!        # uint32 indexed playerId
  queueSize: BigInt!       # uint256 queueSize
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GauntletStarted @entity(immutable: true) {
  id: Bytes!               # Transaction hash
  gauntletId: BigInt!      # uint256 indexed gauntletId
  size: Int!               # uint8 size
  entryFee: BigInt!        # uint256 entryFee
  participantIds: [BigInt!]! # uint32[] participantIds
  vrfRequestId: BigInt!    # uint256 vrfRequestId
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  # Link to the created Gauntlet entity
  gauntlet: Gauntlet!
}

type GauntletCompleted @entity(immutable: true) {
  id: Bytes!               # Transaction hash
  gauntletId: BigInt!      # uint256 indexed gauntletId
  size: Int!               # uint8 size
  entryFee: BigInt!        # uint256 entryFee
  championId: Int!         # uint32 indexed championId (Keep as Int if event param is i32)
  prizeAwarded: BigInt!    # uint256 prizeAwarded (amount paid to winner)
  feeCollected: BigInt!    # uint256 feeCollected (amount added to contract fees)
  participantIds: [BigInt!]! # uint32[] participantIds (post-substitution)
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  # Link to the completed Gauntlet entity
  gauntlet: Gauntlet!
}

type GauntletRecovered @entity(immutable: true) {
  id: Bytes!               # Transaction hash
  gauntletId: BigInt!      # uint256 indexed gauntletId
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
   # Link to the recovered Gauntlet entity
  gauntlet: Gauntlet!
}

type QueueClearedDueToGameDisabled @entity(immutable: true) {
  id: Bytes!               # Transaction hash (unique for this event type)
  playerIds: [String!]!    # List of player IDs removed (store as String for flexibility)
  totalRefunded: BigInt!   # Total ETH refunded
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

